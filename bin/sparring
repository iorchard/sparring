#!/bin/bash
declare -a FUNCBOTS PERFBOTS
FUNCBOTS=(identity network image volume compute)
FUNCBOT_DIR=$(dirname $(realpath $0))/../funcbot
CDBOTS=(identity network image volume compute)
CDBOT_DIR=$(dirname $(realpath $0))/../cdbot
PERFBOTS=(create stop start delete)
PERFBOT_DIR=$(dirname $(realpath $0))/../perfbot

version () {
    cat /etc/os-release
    robot --version
}
list_perfbot () {
    for b in ${PERFBOTS[@]}; do
        echo $b
    done
}
list_cdbot () {
    for b in ${CDBOTS[@]}; do
        echo $b
    done
}
list_funcbot () {
    for b in ${FUNCBOTS[@]}; do
        echo $b
    done
}
run_perfbot () {
    # check the args
    declare -a suites
    [[ $# -ne 0 ]] && suites=($@) || suites=(${PERFBOTS[@]})
    echo ${suites[@]}
    for i in ${suites[@]}; do
        if [[ ! " ${PERFBOTS[@]} " =~ " $i " ]]; then
            echo "Abort: $i is not a test suite."
            list_perfbot
            exit 1
        fi
    done
    # Okay. Let's go.
    cd $PERFBOT_DIR
    SECONDS=0
    robot   \
            --exitonfailure \
            --exitonerror \
            --critical critical \
            --console verbose \
            --consolecolors auto \
            --outputdir /tmp/output \
            "${suites[@]}"
    # Elapsed time
    s=$SECONDS
    echo "Elapsed time: $(($s / 60)) minutes and $(($s % 60)) seconds."
}
run_cdbot () {
    # check the args
    declare -a suites
    [[ $# -ne 0 ]] && suites=($@) || suites=(${CDBOTS[@]})
    echo ${suites[@]}
    for i in ${suites[@]}; do
        if [[ ! " ${CDBOTS[@]} " =~ " $i " ]]; then
            echo "Abort: $i is not a test suite."
            list_cdbot
            exit 1
        fi
    done
    # Okay. Let's go.
    cd $CDBOT_DIR
    SECONDS=0
    robot   \
            --exitonfailure \
            --exitonerror \
            --console verbose \
            --consolecolors off \
            --outputdir /tmp/output \
            "${suites[@]}"
    # Elapsed time
    s=$SECONDS
    echo "Elapsed time: $(($s / 60)) minutes and $(($s % 60)) seconds."
}
run_funcbot () {
    declare -a suites
    declare exclude_tags
    # check the args
    [[ $1 != '-e' ]] && exclude_tags="--exclude evacuate" || shift
    [[ $# -ne 0 ]] && suites=($@) || suites=(${FUNCBOTS[@]})
    for i in ${suites[@]}; do
        if [[ ! " ${FUNCBOTS[@]} " =~ " $i " ]]; then
            echo "Abort: $i is not a test suite."
            list_funcbot
            exit 1
        fi
    done
    # Get sparring_title
    read -p 'Enter Funcbot Sparring Title: ' sparring_title
    s_out="output/funcbot_${sparring_title//[^[:alnum:]._]/}"
    # Okay. Let's go.
    cd $FUNCBOT_DIR
    SECONDS=0
    robot \
        --exitonfailure \
        --exitonerror $exclude_tags \
        --console verbose \
        --consolecolors off \
        --outputdir ${s_out} \
        "${suites[@]}"
    # Elapsed time
    s=$SECONDS
    echo "Elapsed time: $(($s / 60)) minutes and $(($s % 60)) seconds."
}
cleanup () {
    cd $FUNCBOT_DIR
    robot   --exitonfailure \
            --exitonerror \
            --console verbose \
            --consolecolors off \
            --outputdir /tmp/output \
            cleanup.robot
}
show_settings () {
    RESOURCES_DIR="$FUNCBOT_DIR/../resources"
    cat "$RESOURCES_DIR/openstack_settings.robot"
}
USAGE () {
    echo "USAGE: $0 {-h|-c|-d|-D|-s|-S|-f|-l|-p|-L}" 1>&2
    echo ""
    echo " -h --help                          Display this help message."
    echo " -c --cleanup                       Clean up test resources."
    echo " -d|--run-cdbot [TEST_SUITE}...     Run Continuous Delivery test."
    echo " -D|--list-cdbot                    List cdbot test suites."
    echo " -s|--show-settings                 Show settings of openstack API."
    echo " -f|--funcbot [TEST_SUITE]...       Run funcbot."
    echo " -f|--funcbot | -e [TEST_SUITE]...  Run funcbot including evacuate."
    echo " -l|--list-funcbot                  List funcbot test suites."
    echo " -p|--perfbot [TEST_SUITE]...       Run perfbot by openstack API."
    echo " -p|--perfbot | -c [TEST_SUITE]...  Run perfbot by cloudpc API."
    echo " -L|--list-perfbot                  List perfbot test suites."
    echo " -v --version                       List version info."
}
if [ $# -lt 1 ]; then
    USAGE
    exit 1
fi

OPT=$1
shift
# Get argument
while true
do
    case "$OPT" in
        -h | --help)
            USAGE
            exit 0
            ;;
        -c | --cleanup)
            cleanup 
            break
            ;;
        -d | --run-cdbot)
            run_cdbot "$@"
            break
            ;;
        -D | --list-cdbot)
            list_cdbot
            break
            ;;
        -s | --show-settings)
            show_settings
            break
            ;;
        -f | --funcbot)
            run_funcbot "$@"
            break
            ;;
        -l | --list-funcbot)
            list_funcbot
            break
            ;;
        -p | --perfbot)
            run_perfbot "$@"
            break
            ;;
        -L | --list-perfbot)
            list_perfbot
            break
            ;;
        -v | --version)
            version
            break
            ;;
        *)
            echo Error: unknown option: "$OPT" 1>&2
            echo " "
            USAGE
            exit 1
            ;;
    esac
done
