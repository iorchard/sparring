defaults:
  verbose: True
  cert_validate: False
  request_headers:
    x-auth-token: $ENVIRON['SERVICE_TOKEN']
    OpenStack-API-Version: volume 3.59

tests:
- name: connect to volume service
  GET: $ENVIRON['VOLUME_SERVICE']/
  redirects: True
  status: 200
  response_json_paths:
    $.versions[*].links[?rel = "self"].href: /$ENVIRON['VOLUME_SERVICE']/
    $.versions[*].status: CURRENT

#
# volume type
#
- name: create volume type
  POST: /$ENVIRON['PROJECT_ID']/types
  request_headers:
    content-type: application/json
  data:
    volume_type:
      name: $ENVIRON['TEST_VOLUME_TYPE_NAME']
      os-volume-type-access:is_public: false
  status: 200
  response_store_value:
    $.volume_type.id: test_volume_type_id

- name: set volume backend of volume type
  POST: /$ENVIRON['PROJECT_ID']/types/$ENVIRON['TEST_VOLUME_TYPE_ID']/extra_specs
  request_headers:
    content-type: application/json
  data:
    extra_specs:
      volume_backend_name: $ENVIRON['VOLUME_BACKEND_NAME']
  status: 200

- name: show volume type info
  GET: /$ENVIRON['PROJECT_ID']/types/$ENVIRON['TEST_VOLUME_TYPE_ID']
  status: 200
  response_json_paths:
    $.volume_type["os-volume-type-access:is_public"]: false
    $.volume_type.extra_specs.volume_backend_name: $ENVIRON['VOLUME_BACKEND_NAME']

- name: created volume type is in volume type list
  GET: /$ENVIRON['PROJECT_ID']/types?is_public=false
  status: 200
  response_json_paths:
    $.volume_types[?id = "$ENVIRON['TEST_VOLUME_TYPE_ID']"].name: $ENVIRON['TEST_VOLUME_TYPE_NAME']

- name: add volume type to test project
  POST: /$ENVIRON['PROJECT_ID']/types/$ENVIRON['TEST_VOLUME_TYPE_ID']/action
  status: 202
  request_headers:
    content-type: application/json
  data:
    addProjectAccess:
      project: $ENVIRON['TEST_PROJECT_ID']

- name: test project has access to volume type
  GET: /$ENVIRON['PROJECT_ID']/types/$ENVIRON['TEST_VOLUME_TYPE_ID']/os-volume-type-access
  status: 200
  response_json_paths:
    $.volume_type_access[*].project_id: $ENVIRON['TEST_PROJECT_ID']

#
# volume quota
#
- name: update volume quota
  PUT: /$ENVIRON['PROJECT_ID']/os-quota-sets/$ENVIRON['TEST_PROJECT_ID']
  status: 200
  request_headers:
    content-type: application/json
  data:
    quota_set:
      volumes: 10
      backups: 4

- name: check volume quota is set
  GET: /$ENVIRON['PROJECT_ID']/os-quota-sets/$ENVIRON['TEST_PROJECT_ID']
  status: 200
  response_json_paths:
    $.quota_set.volumes: 10
    $.quota_set.backups: 4

#
# volume
#
- name: create volume from image
  POST: /$ENVIRON['TEST_PROJECT_ID']/volumes
  request_headers:
    content-type: application/json
  data:
    volume:
      name: $ENVIRON['TEST_VOLUME_NAME']
      size: $ENVIRON['TEST_VOLUME_SIZE']
      volume_type: $ENVIRON['TEST_VOLUME_TYPE_ID']
      imageRef: $ENVIRON['TEST_IMAGE_ID']
  status: 202
  response_store_value:
    $.volume.id: test_volume_id

- name: create volume
  POST: /$ENVIRON['TEST_PROJECT_ID']/volumes
  request_headers:
    content-type: application/json
  data:
    volume:
      name: $ENVIRON['TEST_VOLUME_NAME']
      size: $ENVIRON['TEST_VOLUME_SIZE']
      volume_type: $ENVIRON['TEST_VOLUME_TYPE_ID']
  status: 202
  response_store_value:
    $.volume.id: test_volume_id

- name: check volume is available
  GET: /$ENVIRON['TEST_PROJECT_ID']/volumes/$ENVIRON['TEST_VOLUME_ID']
  status: 200
  response_json_paths:
      $.volume.status: available

- name: get volume id from volume name
  GET: /$ENVIRON['TEST_PROJECT_ID']/volumes?all_tenants=true
  status: 200
  response_store_value:
    $.volumes[?name = "$ENVIRON['TEST_VOLUME_NAME']"].id: volume_id
  
- name: show volume info
  GET: /$ENVIRON['TEST_PROJECT_ID']/volumes/$ENVIRON['TEST_VOLUME_ID']
  status: 200
  response_json_paths:
    $.volume.name: $ENVIRON['TEST_VOLUME_NAME']

- name: created volume is in volume list
  GET: /$ENVIRON['TEST_PROJECT_ID']/volumes
  status: 200
  response_json_paths:
    $.volumes[?id = "$ENVIRON['TEST_VOLUME_ID']"].name: $ENVIRON['TEST_VOLUME_NAME']

- name: resize volume
  POST: /$ENVIRON['TEST_PROJECT_ID']/volumes/$ENVIRON['TEST_VOLUME_ID']/action
  status: 202
  request_headers:
    content-type: application/json
  data:
    os-extend:
      new_size: $ENVIRON['TEST_VOLUME_RESIZE']

- name: check volume is resized
  GET: /$ENVIRON['TEST_PROJECT_ID']/volumes/$ENVIRON['TEST_VOLUME_ID']
  status: 200
  response_json_paths:
    $.volume.size: $ENVIRON['TEST_VOLUME_RESIZE']

- name: update volume name
  PUT: /$ENVIRON['TEST_PROJECT_ID']/volumes/$ENVIRON['TEST_VOLUME_ID']
  status: 200
  request_headers:
    content-type: application/json
  data:
    volume:
      name: $ENVIRON['TEST_VOLUME_NAME_NEW']
  response_json_paths:
    $.volume.name: $ENVIRON['TEST_VOLUME_NAME_NEW']

#
# volume action
#
- name: upload volume to image service
  POST: /$ENVIRON['TEST_PROJECT_ID']/volumes/$ENVIRON['TEST_VOLUME_ID']/action
  status: 202
  request_headers:
    content-type: application/json
  data:
    os-volume_upload_image:
      image_name: $ENVIRON['IMAGE_NAME']
      disk_format: raw
      container_format: bare
      force: false
  response_store_value:
    $.os-volume_upload_image.image_id: test_image_id_from_vol

- name: revert volume to snapshot
  POST: /$ENVIRON['TEST_PROJECT_ID']/volumes/$ENVIRON['TEST_VOLUME_ID']/action
  status: 202
  request_headers:
    content-type: application/json
  data:
    revert:
      snapshot_id: $ENVIRON['TEST_SNAPSHOT_ID']

#
# snapshot
#
- name: create snapshot
  POST: /$ENVIRON['TEST_PROJECT_ID']/snapshots
  status: 202
  request_headers:
    content-type: application/json
  data:
    snapshot:
      name: $ENVIRON['TEST_SNAPSHOT_NAME']
      volume_id: $ENVIRON['TEST_VOLUME_ID']
      force: true
  response_store_value:
    $.snapshot.id: test_snapshot_id

- name: check snapshot is available
  GET: /$ENVIRON['TEST_PROJECT_ID']/snapshots/$ENVIRON['TEST_SNAPSHOT_ID']
  status: 200
  response_json_paths:
      $.snapshot.status: available

- name: show snapshot info
  GET: /$ENVIRON['TEST_PROJECT_ID']/snapshots/$ENVIRON['TEST_SNAPSHOT_ID']
  status: 200
  response_json_paths:
      $.snapshot.name: $ENVIRON['TEST_SNAPSHOT_NAME']

- name: created snapshot is in snapshot list
  GET: /$ENVIRON['TEST_PROJECT_ID']/snapshots
  status: 200
  response_json_paths:
    $.snapshots[?id = "$ENVIRON['TEST_SNAPSHOT_ID']"].name: $ENVIRON['TEST_SNAPSHOT_NAME']

- name: update snapshot name
  PUT: /$ENVIRON['TEST_PROJECT_ID']/snapshots/$ENVIRON['TEST_SNAPSHOT_ID']
  status: 200
  request_headers:
    content-type: application/json
  data:
    snapshot:
      name: $ENVIRON['TEST_SNAPSHOT_NAME_NEW']
  response_json_paths:
    $.snapshot.name: $ENVIRON['TEST_SNAPSHOT_NAME_NEW']

# used by volume/03_volume.robot
- name: Get a snapshot id of image from server
  GET: /$ENVIRON['PROJECT_ID']/snapshots
  status: 200
  response_store_value:
    $.snapshots[0].id: snapshot_id
#    $.snapshots[?name = "$ENVIRON['SNAPSHOT_NAME']"].id: snapshot_id

#
# clean resources
#
- name: clean snapshot from image
  DELETE: /$ENVIRON['PROJECT_ID']/snapshots/$ENVIRON['TEST_SNAPSHOT_ID']
  status: 202
- name: clean snapshot
  DELETE: /$ENVIRON['TEST_PROJECT_ID']/snapshots/$ENVIRON['TEST_SNAPSHOT_ID']
  status: 202
- name: check snapshot is gone
  GET: /$ENVIRON['TEST_PROJECT_ID']/snapshots/$ENVIRON['TEST_SNAPSHOT_ID']
  status: 404
- name: clean volume 
  DELETE: /$ENVIRON['TEST_PROJECT_ID']/volumes/$ENVIRON['TEST_VOLUME_ID']
  status: 202
- name: check volume is gone
  GET: /$ENVIRON['TEST_PROJECT_ID']/volumes/$ENVIRON['TEST_VOLUME_ID']
  status: 404
- name: clean volume type
  DELETE: /$ENVIRON['PROJECT_ID']/types/$ENVIRON['TEST_VOLUME_TYPE_ID']
  status: 202
- name: check volume type is gone
  GET: /$ENVIRON['PROJECT_ID']/types/$ENVIRON['TEST_VOLUME_TYPE_ID']
  status: 404
